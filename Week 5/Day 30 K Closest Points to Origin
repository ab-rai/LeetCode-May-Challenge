We have a list of points on the plane.  Find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance.)
You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 class Solution {
public:
    int eucDist(int x,int y)
    {
        int dist=x*x;
        dist+=(y*y);
        return dist;
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        priority_queue<pair<int,int> > maxHeap;
        int i=0;
        for(vector<int> point:points)
        {
            int currDist=eucDist(point[0],point[1]);
            if(maxHeap.size()<K)
            {
                maxHeap.push({currDist,i});
            }
            else
            {
                if(maxHeap.top().first>currDist)
                {
                    maxHeap.pop();
                    maxHeap.push({currDist,i});
                }
            }
            i++;
        }
        vector<vector<int>> closestPoints;
        while(!maxHeap.empty())
        {
            closestPoints.push_back(points[maxHeap.top().second]);
            maxHeap.pop();
        }
        return closestPoints;
    }
};

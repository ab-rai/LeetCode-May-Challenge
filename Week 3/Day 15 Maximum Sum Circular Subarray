Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.
Here, a circular array means the end of the array connects to the beginning of the array.
(Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  
(Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

 
class Solution {
public:
    int findMaxSum(vector<int>& A)
    {
        int mx=A[0];
        int curr=A[0];
        for(int i=1;i<A.size();i++)
        {
            curr=A[i]+max(curr,0);
            mx=max(mx,curr);
        }
        return mx;
    }
    int maxSubarraySumCircular(vector<int>& A) {
        int len=A.size();
        int origMaxSum=findMaxSum(A);
        int sum=0;
        for(int i=0;i<len;i++){
            sum+=A[i];
            A[i]=-1*A[i];
        }
        int negMaxSum=findMaxSum(A);
        return (sum+negMaxSum==0)?origMaxSum:max(origMaxSum,sum+negMaxSum);
    }
};

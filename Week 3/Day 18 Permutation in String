Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first 
string's permutations is the substring of the second string.
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int s1freq[26]={0};
        int s2freq[26]={0};
        int s1len=s1.size();
        int s2len=s2.size();
        if(s2len<s1len)
            return false;
        for(char ch:s1)     
            s1freq[ch-'a']++;
        int i,j;
        for(i=0;i<s1len;i++)
            s2freq[s2[i]-'a']++;
        for(j=0;j<26;j++)
        {
            if(s1freq[j]!=s2freq[j])
                break;
        }
        if(j==26)
            return true;
        for(i=s1len;i<s2len;i++)
        {
            s2freq[s2[i-s1len]-'a']--;
            s2freq[s2[i]-'a']++;
             for(j=0;j<26;j++)
        {
            if(s1freq[j]!=s2freq[j])
                break;
        }
        if(j==26)
            return true;
       
        }
        return false;
    }
};

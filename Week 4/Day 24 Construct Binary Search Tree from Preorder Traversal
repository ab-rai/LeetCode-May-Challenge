Return the root node of a binary search tree that matches the given preorder traversal.
(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, 
and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first,
then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helperBST(vector<int>& preorder,int &ind,int maxAllowed) 
    {
        if(ind<preorder.size())
        {
            TreeNode *currNode=new TreeNode(preorder[ind]);
            if(ind+1<preorder.size() &&  preorder[ind+1]<currNode->val)
                currNode->left=helperBST(preorder,++ind,currNode->val);
            else
                currNode->left=NULL;
            if(ind+1<preorder.size() &&  preorder[ind+1]<maxAllowed)
               currNode->right=helperBST(preorder,++ind,maxAllowed);
            else 
                currNode->right=NULL;
             return currNode;
            
        }
        else return NULL;
        
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        if(preorder.empty())
            return NULL;
        int ind=0;
        TreeNode *ans=helperBST(preorder,ind,INT_MAX);
        return ans;
    }
};

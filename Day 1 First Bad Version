/*
Difficulty Rating= 4/5 (requires good observation and Binary search concepts)

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product 
fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first
bad version. You should minimize the number of calls to the API.

Example:
Given n = 5, and version = 4 is the first bad version.
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version. 
*/

class Solution {
public:
    int firstBadVersion(int n) {
        int l=1,r=n;   // l and r stores the left and right indices
        while(l<r)
        {
            int mid=l+(r-l)/2;
            if(isBadVersion(mid))// if mid index array is bad version then we would only need to explore the left half of the array
            {
                r=mid;  // r points to the badVersion index but we tries to search leftmost/first badVersion 
            }           
            else l=mid+1; // if mid index array is not a bad version then we need to explore the right half of the array only
        }
        return r; // r holds the leftmost badVersion index
    }
};
//Time Complexity:-O(log n)
//Space Complexity:-O(1)
